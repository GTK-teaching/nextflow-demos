import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
def jsonSlurper = new JsonSlurper()
SimpleDateFormat timestamp_fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")

params.executor = "slurm"
params.clusterOptions = '--ntasks-per-node=1'

// job environment variables to print inside the jobs stdout log
params.job_vars = "SLURM_JOB_ID SLURM_JOB_NAME SLURM_JOB_PARTITION"

// default queue to fall back to
params.queue_default = "cpu_short"

// allow to set queue from CLI
params.queue = ""

// read the "best_queue" value from this file
params.queue_json = "queue.json"

// keep a log of the selected queues in this file
params.queue_log = "queue.log"

process {
    time = "5m"
    cpus = 1
    memory = { 40.MB * task.cpus }
    executor = "${params.executor}"
    queue = {
        // select an executor queue dynamically based on criteria
        // Priorities:
        // 0. use CLI passed arg
        // 1. check for slurm.json values; {"best_queue": "some_queue"}
        // 2. use default queue
        def queue_log = new File(params.queue_log)
        def timestamp = timestamp_fmt.format(new Date())
        def task_hash = "${task.workDir.parent.baseName}/${task.workDir.baseName[0..5]}"

        // evaluate the conditions to determine which queue to submit to
        if( params.queue != "" && params.queue != null ){
            //  condition 1: '--queue' was passed and is not empty
            def cond_label = "1"

            // make log entry
            queue_log.append("\n[${timestamp}] [${cond_label}] [${task.process}] [${task_hash}] ${params.queue}")

            // return the queue to use
            params.queue
        // make sure the JSON file exists...
        } else if( new File("${params.queue_json}").exists() ){
            // read the JSON contents
            def queue_json = jsonSlurper.parseText(new File("${params.queue_json}").text)

            // check if 'best_queue' is in the JSON and not null
            if( queue_json.containsKey("best_queue") && queue_json.best_queue != null ){
                //  condition 2: JSON file exists and it has a non-null 'best_queue' key
                def cond_label = "2"

                // make log entry
                queue_log.append("\n[${timestamp}] [${cond_label}] [${task.process}] [${task_hash}] ${queue_json.best_queue}")

                // return the queue to use
                "${queue_json.best_queue}"
            } else {
                //  condition 3: JSON exists but does not contain a valid 'best_queue' key
                def cond_label = "3"

                // make log entry
                queue_log.append("\n[${timestamp}] [${cond_label}] [${task.process}] [${task_hash}] ${params.queue_default}")

                // return queue to use
                params.queue_default
            }
        } else {
            //  condition 4: no CLI arg passed, not JSON present
            def cond_label = "4"

            // make log entry
            queue_log.append("\n[${timestamp}] [${cond_label}] [${task.process}] [${task_hash}] ${params.queue_default}")

            // return queue to use
            params.queue_default
        }

    }
    clusterOptions = "${params.clusterOptions}"
}
